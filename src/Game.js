// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.
// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å,
// –∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –∏–∑ run.js –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ new Game().

const Hero = require('./game-models/Hero');
const Enemy = require('./game-models/Enemy');
const Boomerang = require('./game-models/Boomerang');
const View = require('./View');
const addPlayer = require('./db');

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.

class Game {
  constructor({ trackLength }, playerName) {
    this.trackLength = trackLength;
    this.boomerang = new Boomerang({ position: 1 });
    this.enemy = new Enemy();
    this.hero = new Hero({ position: 0 }, this.boomerang, this.enemy);
    this.view = new View();
    this.track = [];
    this.regenerateTrack();
    this.totalScore = 0;
    this.playerName = playerName;
  }

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    this.track = new Array(this.trackLength).fill(' ');
    this.track[this.hero.position] = this.hero.skin;
    this.track[this.boomerang.position] = this.boomerang.skin;
    this.track[this.enemy.position] = this.enemy.skin;
  }

  check() {
    if (this.enemy.position - this.hero.position <= 1) {
      this.hero.skin = 'üíÄYOU ARE DEAD!üíÄ';
      this.boomerang.skin = '';
      this.enemy.skin = '';
      this.track[this.enemy.position] = this.enemy.skin;
      this.totalScore = this.enemy.score;
      setTimeout(() => {
        this.hero.die(this.playerName, this.totalScore);
      });
    }
    if (
      this.enemy.position <= this.boomerang.position &&
      this.enemy.position - this.hero.position !== 1
    ) {
      this.enemy.die();
      this.enemy.generateSkin();
    }
  }

  play() {
    this.hero.move();
    setInterval(() => {
      // Let's play!
      this.check();
      this.regenerateTrack();
      this.view.render(
        this.track,
        this.enemy.score,
        this.enemy.killed.join('')
      );
      this.enemy.moveLeft();
    }, 100);
  }
}

module.exports = Game;
